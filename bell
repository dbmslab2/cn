import java.util.Scanner;
public class BellmanFord {
 private static final int MAX_VALUE = 999;
 public static void main(String[] args) {
 Scanner scanner = new Scanner(System.in);
 System.out.println("Enter the number of vertices");
 int num_ver = scanner.nextInt();
 int A[][] = new int[num_ver + 1][num_ver + 1];
 System.out.println("Enter the adjacency matrix");
 for (int sn = 1; sn <= num_ver; sn++)
 for (int dn = 1; dn <= num_ver; dn++) {
 A[sn][dn] = scanner.nextInt();
 if (sn != dn && A[sn][dn] == 0)
 A[sn][dn] = MAX_VALUE;
 }
 System.out.println("Enter the source vertex");
 int source = scanner.nextInt();
 scanner.close();
 int D[] = new int[num_ver + 1];
 for (int node = 1; node <= num_ver; node++)
 D[node] = MAX_VALUE;
 D[source] = 0;
 for (int node = 1; node <= num_ver - 1; node++)
 for (int sn = 1; sn <= num_ver; sn++)
 for (int dn = 1; dn <= num_ver; dn++)
 if (A[sn][dn] != MAX_VALUE && D[dn] > D[sn] + A[sn][dn])
 D[dn] = D[sn] + A[sn][dn];
 for (int sn = 1; sn <= num_ver; sn++)
 for (int dn = 1; dn <= num_ver; dn++)
 if (A[sn][dn] != MAX_VALUE && D[dn] > D[sn] + A[sn][dn])
 System.out.println("The Graph contains negative edge cycle");
 for (int vertex = 1; vertex <= num_ver; vertex++)
 System.out.println("distance of source " + source + " to " + vertex + " is " + D[vertex]);
 }
}
